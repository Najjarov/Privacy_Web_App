// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal;

namespace Privacy_Web_App.DataContext;

public partial class dbContext : DbContext
{
    public dbContext()
    {
    }

    public dbContext(DbContextOptions<dbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Landing_poi> Landing_pois { get; set; }

    public virtual DbSet<Player> Players { get; set; }

    public virtual DbSet<Team> Teams { get; set; }

    public virtual DbSet<Valk_ult> Valk_ults { get; set; }

    public virtual DbSet<alter_void> alter_voids { get; set; }

    public virtual DbSet<climb> climbs { get; set; }

    public virtual DbSet<coach> coaches { get; set; }

    public virtual DbSet<did_you_know_vid> did_you_know_vids { get; set; }

    public virtual DbSet<evac> evacs { get; set; }

    public virtual DbSet<jump_tower> jump_towers { get; set; }

    public virtual DbSet<legend> legends { get; set; }

    public virtual DbSet<loot_detail_info> loot_detail_infos { get; set; }

    public virtual DbSet<loot_info> loot_infos { get; set; }

    public virtual DbSet<map> maps { get; set; }

    public virtual DbSet<map_loot> map_loots { get; set; }

    public virtual DbSet<map_spawn_rate> map_spawn_rates { get; set; }

    public virtual DbSet<menu_main> menu_mains { get; set; }

    public virtual DbSet<menu_sub> menu_subs { get; set; }

    public virtual DbSet<playable_spot> playable_spots { get; set; }

    public virtual DbSet<poi> pois { get; set; }

    public virtual DbSet<rat_spot> rat_spots { get; set; }

    public virtual DbSet<region> regions { get; set; }

    public virtual DbSet<season> seasons { get; set; }

    public virtual DbSet<team_rotation> team_rotations { get; set; }

    public virtual DbSet<tour_coach> tour_coaches { get; set; }

    public virtual DbSet<tour_detail_stat> tour_detail_stats { get; set; }

    public virtual DbSet<tour_inv_leg> tour_inv_legs { get; set; }

    public virtual DbSet<tour_map_stat> tour_map_stats { get; set; }

    public virtual DbSet<tour_player> tour_players { get; set; }

    public virtual DbSet<tour_stat> tour_stats { get; set; }

    public virtual DbSet<tour_team_map_stat> tour_team_map_stats { get; set; }

    public virtual DbSet<tour_team_metum> tour_team_meta { get; set; }

    public virtual DbSet<tour_team_stat> tour_team_stats { get; set; }

    public virtual DbSet<tour_team_stats_map_inv_metum> tour_team_stats_map_inv_meta { get; set; }

    public virtual DbSet<tour_team_stats_map_metum> tour_team_stats_map_meta { get; set; }

    public virtual DbSet<tour_team_stats_overall_inv_metum> tour_team_stats_overall_inv_meta { get; set; }

    public virtual DbSet<tour_team_stats_overall_metum> tour_team_stats_overall_meta { get; set; }

    public virtual DbSet<tournament> tournaments { get; set; }

    public virtual DbSet<tutorial_vid> tutorial_vids { get; set; }

    public virtual DbSet<uav_range> uav_ranges { get; set; }

    public virtual DbSet<view> views { get; set; }

    public virtual DbSet<viewsaccess> viewsaccesses { get; set; }

    public virtual DbSet<visual_tut> visual_tuts { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseMySql("server=srv1349.hstgr.io;database=u252275895_site_db;uid=u252275895_pleaseeeprivac;pwd=3DS-S+-7vGCtbxM", Microsoft.EntityFrameworkCore.ServerVersion.Parse("10.11.9-mariadb"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_general_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Landing_poi>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.Landing_pois)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Landing_pois_ibfk_1");

            entity.HasOne(d => d.season).WithMany(p => p.Landing_pois)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Landing_pois_ibfk_2");
        });

        modelBuilder.Entity<Player>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Current_Team).WithMany(p => p.Players)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Players_ibfk_1");
        });

        modelBuilder.Entity<Team>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.region).WithMany(p => p.Teams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Teams_ibfk_1");
        });

        modelBuilder.Entity<Valk_ult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<alter_void>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.alter_voids)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("alter_voids_ibfk_1");
        });

        modelBuilder.Entity<climb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.climbs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("climbs_ibfk_1");
        });

        modelBuilder.Entity<coach>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Current_Team).WithMany(p => p.coaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("coaches_ibfk_1");
        });

        modelBuilder.Entity<did_you_know_vid>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<evac>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.evacs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("evacs_ibfk_1");
        });

        modelBuilder.Entity<jump_tower>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.jump_towers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("jump_towers_ibfk_1");
        });

        modelBuilder.Entity<legend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<loot_detail_info>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.loot_detail_infos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("loot_detail_info_ibfk_2");

            entity.HasOne(d => d.poi).WithMany(p => p.loot_detail_infos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("loot_detail_info_ibfk_3");
        });

        modelBuilder.Entity<loot_info>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.loot_infos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("loot_info_ibfk_1");

            entity.HasOne(d => d.poi).WithMany(p => p.loot_infos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("loot_info_ibfk_2");
        });

        modelBuilder.Entity<map>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<map_loot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.map_loots)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("map_loot_ibfk_1");
        });

        modelBuilder.Entity<map_spawn_rate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.map_spawn_rates)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("map_spawn_rate_ibfk_1");
        });

        modelBuilder.Entity<menu_main>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.view).WithMany(p => p.menu_mains).HasConstraintName("menu_main_ibfk_1");
        });

        modelBuilder.Entity<menu_sub>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.main_menu).WithMany(p => p.menu_subs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("menu_sub_ibfk_1");

            entity.HasOne(d => d.view).WithMany(p => p.menu_subs).HasConstraintName("menu_sub_ibfk_2");
        });

        modelBuilder.Entity<playable_spot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.playable_spots)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("playable_spots_ibfk_1");
        });

        modelBuilder.Entity<poi>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.pois)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pois_ibfk_1");

            entity.HasOne(d => d.season).WithMany(p => p.pois)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pois_ibfk_2");
        });

        modelBuilder.Entity<rat_spot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.rat_spots)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("rat_spots_ibfk_1");
        });

        modelBuilder.Entity<region>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<season>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<team_rotation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.endzone_poi).WithMany(p => p.team_rotations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_rotation_ibfk_1");

            entity.HasOne(d => d.landing_poi).WithMany(p => p.team_rotations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_rotation_ibfk_2");

            entity.HasOne(d => d.map).WithMany(p => p.team_rotations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_rotation_ibfk_3");

            entity.HasOne(d => d.team).WithMany(p => p.team_rotations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_rotation_ibfk_4");

            entity.HasOne(d => d.tour).WithMany(p => p.team_rotations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_rotation_ibfk_5");
        });

        modelBuilder.Entity<tour_coach>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.coach).WithMany(p => p.tour_coaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_coaches_ibfk_1");

            entity.HasOne(d => d.team).WithMany(p => p.tour_coaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_coaches_ibfk_2");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_coaches)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_coaches_ibfk_3");
        });

        modelBuilder.Entity<tour_detail_stat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Legend_1).WithMany(p => p.tour_detail_statLegend_1s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_detail_stat_ibfk_4");

            entity.HasOne(d => d.Legend_2).WithMany(p => p.tour_detail_statLegend_2s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_detail_stat_ibfk_5");

            entity.HasOne(d => d.Legend_3).WithMany(p => p.tour_detail_statLegend_3s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_detail_stat_ibfk_6");

            entity.HasOne(d => d.map).WithMany(p => p.tour_detail_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_detail_stat_ibfk_3");

            entity.HasOne(d => d.team).WithMany(p => p.tour_detail_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_detail_stat_ibfk_1");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_detail_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_detail_stat_ibfk_2");
        });

        modelBuilder.Entity<tour_inv_leg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.legend).WithMany(p => p.tour_inv_legs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_inv_leg_ibfk_1");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_inv_legs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_inv_leg_ibfk_2");
        });

        modelBuilder.Entity<tour_map_stat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.legend1).WithMany(p => p.tour_map_statlegend1s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_map_stat_ibfk_4");

            entity.HasOne(d => d.legend2).WithMany(p => p.tour_map_statlegend2s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_map_stat_ibfk_5");

            entity.HasOne(d => d.legend3).WithMany(p => p.tour_map_statlegend3s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_map_stat_ibfk_6");

            entity.HasOne(d => d.map).WithMany(p => p.tour_map_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_map_stat_ibfk_3");

            entity.HasOne(d => d.team).WithMany(p => p.tour_map_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_map_stat_ibfk_2");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_map_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_map_stat_ibfk_1");
        });

        modelBuilder.Entity<tour_player>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.player).WithMany(p => p.tour_players)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_players_ibfk_1");

            entity.HasOne(d => d.team).WithMany(p => p.tour_players)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_players_ibfk_2");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_players)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_players_ibfk_3");
        });

        modelBuilder.Entity<tour_stat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Legend_1).WithMany(p => p.tour_statLegend_1s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_stats_ibfk_1");

            entity.HasOne(d => d.Legend_2).WithMany(p => p.tour_statLegend_2s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_stats_ibfk_2");

            entity.HasOne(d => d.Legend_3).WithMany(p => p.tour_statLegend_3s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_stats_ibfk_3");

            entity.HasOne(d => d.team).WithMany(p => p.tour_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_stats_ibfk_4");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_stats_ibfk_5");
        });

        modelBuilder.Entity<tour_team_map_stat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.tour_team_map_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_map_stats_ibfk_1");

            entity.HasOne(d => d.pois).WithMany(p => p.tour_team_map_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_map_stats_ibfk_2");

            entity.HasOne(d => d.team).WithMany(p => p.tour_team_map_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_map_stats_ibfk_3");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_team_map_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_map_stats_ibfk_4");
        });

        modelBuilder.Entity<tour_team_metum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.legend_Id_1Navigation).WithMany(p => p.tour_team_metumlegend_Id_1Navigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_meta_ibfk_2");

            entity.HasOne(d => d.legend_Id_2Navigation).WithMany(p => p.tour_team_metumlegend_Id_2Navigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_meta_ibfk_3");

            entity.HasOne(d => d.legend_Id_3Navigation).WithMany(p => p.tour_team_metumlegend_Id_3Navigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_meta_ibfk_4");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_team_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_meta_ibfk_1");
        });

        modelBuilder.Entity<tour_team_stat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.pois).WithMany(p => p.tour_team_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_ibfk_1");

            entity.HasOne(d => d.team).WithMany(p => p.tour_team_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_ibfk_2");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_team_stats)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_ibfk_3");
        });

        modelBuilder.Entity<tour_team_stats_map_inv_metum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.legend).WithMany(p => p.tour_team_stats_map_inv_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_inv_meta_ibfk_2");

            entity.HasOne(d => d.map).WithMany(p => p.tour_team_stats_map_inv_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_inv_meta_ibfk_3");

            entity.HasOne(d => d.team).WithMany(p => p.tour_team_stats_map_inv_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_inv_meta_ibfk_1");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_team_stats_map_inv_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_inv_meta_ibfk_4");
        });

        modelBuilder.Entity<tour_team_stats_map_metum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.legend_Id_1Navigation).WithMany(p => p.tour_team_stats_map_metumlegend_Id_1Navigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_meta_ibfk_1");

            entity.HasOne(d => d.legend_Id_2Navigation).WithMany(p => p.tour_team_stats_map_metumlegend_Id_2Navigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_meta_ibfk_2");

            entity.HasOne(d => d.legend_Id_3Navigation).WithMany(p => p.tour_team_stats_map_metumlegend_Id_3Navigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_meta_ibfk_3");

            entity.HasOne(d => d.map).WithMany(p => p.tour_team_stats_map_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_meta_ibfk_4");

            entity.HasOne(d => d.team).WithMany(p => p.tour_team_stats_map_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_meta_ibfk_5");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_team_stats_map_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_map_meta_ibfk_6");
        });

        modelBuilder.Entity<tour_team_stats_overall_inv_metum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.legend).WithMany(p => p.tour_team_stats_overall_inv_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_overall_inv_meta_ibfk_1");

            entity.HasOne(d => d.team).WithMany(p => p.tour_team_stats_overall_inv_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_overall_inv_meta_ibfk_2");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_team_stats_overall_inv_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_overall_inv_meta_ibfk_3");
        });

        modelBuilder.Entity<tour_team_stats_overall_metum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.legend_Id_1Navigation).WithMany(p => p.tour_team_stats_overall_metumlegend_Id_1Navigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_overall_meta_ibfk_1");

            entity.HasOne(d => d.legend_Id_2Navigation).WithMany(p => p.tour_team_stats_overall_metumlegend_Id_2Navigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_overall_meta_ibfk_2");

            entity.HasOne(d => d.legend_Id_3Navigation).WithMany(p => p.tour_team_stats_overall_metumlegend_Id_3Navigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_overall_meta_ibfk_3");

            entity.HasOne(d => d.team).WithMany(p => p.tour_team_stats_overall_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_overall_meta_ibfk_4");

            entity.HasOne(d => d.tour).WithMany(p => p.tour_team_stats_overall_meta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tour_team_stats_overall_meta_ibfk_5");
        });

        modelBuilder.Entity<tournament>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map1).WithMany(p => p.tournamentmap1s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tournaments_ibfk_2");

            entity.HasOne(d => d.map2).WithMany(p => p.tournamentmap2s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tournaments_ibfk_3");

            entity.HasOne(d => d.winner_team).WithMany(p => p.tournaments).HasConstraintName("tournaments_ibfk_1");
        });

        modelBuilder.Entity<tutorial_vid>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<uav_range>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.map).WithMany(p => p.uav_ranges)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("uav_ranges_ibfk_1");
        });

        modelBuilder.Entity<view>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<viewsaccess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.view).WithMany(p => p.viewsaccesses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("viewsaccess_ibfk_1");
        });

        modelBuilder.Entity<visual_tut>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}